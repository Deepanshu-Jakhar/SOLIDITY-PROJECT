// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract DeepanshuToken {
    // Public variables to store the token details
    string public deepanshuTokenName;
    string public deepanshuTokenSymbol;
    uint256 public deepanshuTotalSupply;

    // Mapping to store the balances of addresses
    mapping(address => uint256) public deepanshuBalances;

    // Constructor to initialize the token details
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        deepanshuTokenName = _name;
        deepanshuTokenSymbol = _symbol;
        deepanshuTotalSupply = _initialSupply;
        deepanshuBalances[msg.sender] = _initialSupply; // Assign initial supply to contract deployer
    }

    // Mint function to increase total supply and balance of the address
    function mint(address _recipient, uint256 _amount) public {
        deepanshuTotalSupply += _amount;
        deepanshuBalances[_recipient] += _amount;
    }

    // Burn function to decrease total supply and balance of the address
    function burn(address _account, uint256 _amount) public {
        require(deepanshuBalances[_account] >= _amount, "Insufficient balance to burn");
        deepanshuTotalSupply -= _amount;
        deepanshuBalances[_account] -= _amount;
    }
}
